#ifdef FUNCTIONS_EXPORTS
#define FUNCTIONS_API __declspec(dllexport)
#else
#define FUNCTIONS_API __declspec(dllimport)
#endif

//Макросы
//
//В ресурсах определены следующие макросы:
#define IDB_PHOTO	201 //фото разработчика(мое то бишь)
#define IDS_URL		301 //адрес сайта разработчика
#define IDS_MAIL	302 //почта технической поддержки
#define IDS_ICQ		303 //ICQ
#define IDS_WMZ		304 //кошелек WebMoney Dollar
#define IDS_WMR		305 //кошелек WebMoney Ruble
#define IDS_WMU		306 //кошелек WebMoney UAH
#define IDS_WME		307 //кошелек WebMoney Euro
#define IDS_WMG		308 //кошелек WebMoney Gold
/*//
//Программные макросы
#define MAX_CHARS 1024000			//максимальный размер файла с текстом - 0.97 МБ
//Скриптовые макросы
#define SCRIPT1	  "NAME"
#define SCRIPT2	  "TITLE"
#define SCRIPT3	  "END"
#define SCRIPT4	  "COUNT"
#define SCRIPT5	  "#"
#define SCRIPT6	  "QUESTION"
#define SCRIPT7	  "ANSWER"
#define SCRIPT8	  "RESULT"
#define SCRIPT9	  "IMAGE"
#define SCRIPT10  "IF"
#define SCRIPT11  "GOTO"
#define SCRIPT12  "OR"
#define SCRIPT13  "EDIT"
#define SCRIPT14  "COUNTER"
#define SCRIPT15  "'"
//
//
//Стукруры
//
//Структура для программы CoolTest, содержащая имя файла и его заголовок, реализована в виде связанного списка.
// file - имя файла
// title - заголовок файла
// link - ссылка на следующий элемент данного списка
struct FUNCTIONS_API CT_LIST
{
	char file[100];
	char title[1000];
	CT_LIST *link;
};
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Основная структура, описывающая разделитель для класса CSplitter
struct FUNCTIONS_API SPLITTER
{
	//Ориентация разделителя
	//TRUE - горизонтальный, FALSE - вертикальный
	BOOL bHorizontal;
	//Количество линий
	//TRUE - одна линия, FALSE - две линии
	BOOL bOneLine;
	//Координата разделителя
	int nCoordinate;
	//Цвет линии разделителя
	COLORREF LineColor;
};*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//Функции
//
//Функция проверки на единственный запущенный экземпляр приложения(действует только внутри данной программы)
// szName - уникальный идентификатор
//Возвращает TRUE - если данное приложение еще не запущено, FALSE - если данное приложение уже запущено
FUNCTIONS_API BOOL WeAreAlone(LPSTR szName);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Функция одиночного проигрывания WAV-файла из ресурсов
// hModule - идентификатор модуля программы
// nID - идентификатор файла в ресурсах
// lpResourceType - имя секции в ресурсах с файлом
// bOneTime: TRUE - файл проигрывается один раз, FALSE - файл проигрывается бесконечное количество раз
// Возвращает TRUE - если проигрывание прошло успешно, FALSE - если произошла ошибка
FUNCTIONS_API BOOL PlayWAVResource(HMODULE hModule, UINT nID, LPCSTR lpResourceType, BOOL bOneTime);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Функция остановки проигрывания WAV-файла из ресурсов.
// Возвращает TRUE - если остановка прошла успешно, FALSE - если произошла ошибка
FUNCTIONS_API BOOL StopPlayWAVREsource(void);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Функция копирует из строки src в буфер dst не более чем size - 1 символов и гарантированно устанавливает в конец строки
//нулевой символ.
//Copyright (c) 1998 Todd C. Miller <Todd.Miller@courtesan.com>
//dst — указатель на буфер назначения.
//src — указатель на исходную строку.
//size — размер буфера назначения.
//Возвращаемое значение: Функция возвращает размер строки по адресу src, вне зависимости удалось ее скопировать полностью
//или нет. Это позволяет легко определить что буфер назначения слишком мал для копируемой строки.
FUNCTIONS_API size_t strlcpy(char *dst, const char *src, size_t siz);
/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//Классы
//
//Класс чтения скриптов для программы CoolTest
class FUNCTIONS_API CReadScript
{
	public:
		CReadScript(void);
		~CReadScript(void);
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//Функция чтения заглавного скрипта
		// lpDllName - имя файла с ресурсами
		// lpDllResourceName - имя заглавного ресурса
		// lpDllResourceType - тип заглавного ресурса
		//Возвращаемое значение: указатель на заголовок связанного списка.
		CT_LIST* ReadMainScript(LPCSTR lpDllName, LPCSTR lpDllResourceName, LPCSTR lpDllResourceType);
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	private:
		//Внутренняя функция загрузки тесктового ресурса
		// bLoad: TRUE - загрузка файла ресурсовб FALSE - выгрузка файла ресурсов
		// lpDllName - имя файла с ресурсами
		// lpDllResourceName - имя заглавного ресурса
		// lpDllResourceType - тип заглавного ресурса
		//Возвращаемое значение: текст из ресурса, NULL - если произошла ошибка.
		HGLOBAL LoadResource(LPCSTR lpDllName, LPCSTR lpDllResourceName, LPCSTR lpDllResourceType);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//Класс для разделения окна на две области
class FUNCTIONS_API CSplitter
{
	public:
		//Конструктор
		CSplitter(void);
		//Деструктор
		~CSplitter(void);
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//Функция разделения окна
		//hWnd - окно приложения
		//dc - контекст устройства
		//splitter - структура, описывающая разделитель
		//Возвращаемое значение:
		//TRUE - если успешно, FALSE - если выполнение функции завершилось с ошибкой
		BOOL DrawSplitter(HWND hWnd, HDC dc, SPLITTER splitter);
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//Функция изменения курсора при наведении на разделитель
		//hWnd - окно приложения
		//bHorizontal - ориентация разделителя
		//TRUE - горизонтальный, FALSE - вертикальный
		//nCoordinate - расположение разделителя(в оконной системе координат)
		//nShift - смещение оконных координат по отношению к системным
		//Возвращаемое значение:
		//TRUE - если успешно, FALSE - если выполнение функции завершилось с ошибкой
		//BOOL ChangeCursor(HWND hWnd, BOOL bHorizontal, int nCoordinate, int nShift);
		//Функция перемещения разделителя
		//hWnd - окно приложения
		//bHorizontal - ориентация разделителя
		//nCoordinate - координата курсора
		//nShift - смещение оконных координат по отношению к системным
		//Возвращаемое значение:
		//TRUE - если успешно, FALSE - если выполнение функции завершилось с ошибкой
		//BOOL MoveSplitter(HWND hWnd, BOOL bHorizontal, int nCoordinate, int nShift);
};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//Класс для работы с увакованным файлом Lestat Packed Binary File (LPBF)
//
//Формат файла LPBF v1.0 - ограничение: размер файла не может превышать 4 ГБ
//Секция данных
//	Заголовок (LPBF)						4 bytes
//	Версия									2 bytes
//		Версия упаковщика					1 byte
//		Версия шифровальщика заголовков		1 byte
//	Секция CRC								8 bytes
//		Размер секции данных				4 bytes
//		Размер bin-файла					4 bytes
//	Таблица имен и смещений					(переменное значение. Вычисляется: размер секции данных - размер секции CRC - размер заголовка - размер версии)
//		Количество файлов					4 bytes
//		(Для каждого файла)
//		Размер имени						1 byte
//		Имя файла							(переменное значение, определяется размером имени)
//		Размер файла						4 bytes
//Секция текста								(переменное значение. Вычисляется: размер bin-файла - размер секции данных)
//
class FUNCTIONS_API CLPBF
{
public:
	//Конструктор
	CLPBF(void);
	//Деструктор
	~CLPBF(void);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Функция собирает бинарный файл из списка файлов
	// cPath - путь к папке с файлами для упаковки
	// cFileName - имя выходного файла
	//Возвращаемое значение: TRUE - если успешно, FALSE - если ошибка.
	BOOL Collect(char *cPath, char *cFileName);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
};*/